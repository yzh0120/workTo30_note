什么是锁
锁是计算机协调多个进程或者多个线程并发访问某一资源的机制

锁冲突是影响数据库并发访问性能的一个重要因素

2. 数据库锁的分类


2.1 从对数据的操作粒度分为：表锁 和 行锁
	表锁特点
	<1>MylSAM引擎使用表锁，开销小，加锁快，无死锁，锁定力度大，发生锁冲突的概率最高。并发度最低 不支持事务
	
	<1>锁类型
		共享读锁
		对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读操作，但会阻塞对同一表的写操作。只有当读锁释放后，才能执行其他进程的写操作。在锁释放前不能取其他表
		
		独占写锁
		对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其他进程的读写操作。在锁释放前不能写其他表。
	---------------------------------------
	行锁（重中之重）
	mysql怎么加行锁？ --> https://m.php.cn/article/419436.html
	<1>开销大，加锁慢，会出现死锁 锁定粒度最小，发生锁冲突概率最低，并发度最高	 支持事务
		InnoDB的出现是为了弥补MyISAM的不足,更适合高并发场景-->InnoDB默认采用行锁，在未使用索引字段查询时升级为表锁
	<2>锁类型:
		间隙锁	当我们用范围条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录,叫做"间隙(GAP)"。
				InnoDB也会对这个"间隙"加锁，这种锁机制就是所谓的间隙锁(Next-Key锁)。
				
				Transaction-A:
				mysql> update innodb_lock set k=66 where id >=6;
				Query OK, 1 row affected (0.63 sec)
				mysql> commit;
				 
				Transaction-B:
				mysql> insert into innodb_lock (id,k,v) values(7,'7','7000');
				Query OK, 1 row affected (18.99 sec)
				危害(坑)：若执行的条件是范围过大，则InnoDB会将整个范围内所有的索引键值全部锁定，很容易对性能造成影响。
				
		排他锁  也称写锁，独占锁，当前写操作没有完成前，它会阻断其他写锁和读锁。
		
		共享锁  也称读锁，多用于判断数据是否存在，多个读操作可以同时进行而不会互相影响。当如果事务对读锁进行修改操作，很可能会造成死锁。
	<3>MySQL会根据自身的执行计划，考虑是否使用索引(所以explain命令中会有possible_key 和 key)。如果MySQL认为全表扫描效率更高，它就不会使用索引
		第一种情况：全表更新。事务需要更新大部分或全部数据，且表又比较大。若使用行锁，会导致事务执行效率低，从而可能造成其他事务长时间锁等待和更多的锁冲突。
	
		第二种情况：多表查询。事务涉及多个表，比较复杂的关联查询，很可能引起死锁，造成大量事务回滚。这种情况若能一次性锁定事务涉及的表，
				从而可以避免死锁、减少数据库因事务回滚带来的开销。
----------------------------------------------------------------------------------------------
InnoDB的行锁是针对索引加的锁，不是针对记录加的锁。并且该索引不能失效，否则都会从行锁升级为表锁

当你需要更新一张较大表的大部分甚至全表的数据时。而你又傻乎乎地用索引作为检索条件。一不小心开启了行锁
MySQL却认为大量对一张表使用行锁，会导致事务执行效率低，从而可能造成其他事务长时间锁等待和更多的锁冲突问题，性能严重下降。
所以MySQL会将行锁升级为表锁，即实际上并没有使用索引。
----------------------------------------------------------------------------------------------

2.2 从对数据的操作类型分为：读锁（共享锁）和 写锁（排他锁）
读锁：针对同一份数据，对该数据的读操作可以同时进行且不受影响。 表级  行级
写锁：写操作未完成前，会阻断其他的读操作和写操作。            表级  行级


https://blog.csdn.net/kuyuyingzi/article/details/87710259?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3
https://blog.csdn.net/kuyuyingzi/article/details/87710259?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3