对象的不同形态(猫在不同时刻表现出来的不同形态)
我们可以说猫是猫
我们也可以说猫是动物
				
多态的前提和提现
1 有继承/实现关系
2 有方法重写
3 有父类引用指向子类对象
public calss Student extends People{
	public void  say(){
		sout("学生说话")
	}
}

public calss  People{
	public void  say(){
		sout("人说话")
	}
}

//外界看到的是左边的引用 所以找成员变量看左边(编译和运行都看左边),但是找成员方法是看右边的重写方法(编译看左边,运行看右边)
People p =new Student(); 

-------------------------------------------
好处(找成员方法是看右边的重写方法(编译看左边,运行看右边)) : 定义方法的时候 ,使用父类型作为参数 ,使用方法的时候,使用具体的子类方法
坏处 看不到子类的特有成员和方法
-------------------------------------------
向上转型 : 父类引用指向子类对象  People p =new Student(); 
向下转型(解决了多态的坏处) : 父类引用转为子类对象  Student s1 = (Student)p;